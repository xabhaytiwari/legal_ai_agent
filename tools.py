from langchain.tools import tool
import os

# Abhi ke liye, let's use a simple knowledge base, baad mein yahan Vector-DB use karenge.

legal_knowledge_base = {
    "complaint filing process": "To file a complaint, you typically need to fill out Form A, provide supporting documents, and submit it to the relevant department within 30 days of the incident. Specific forms and deadlines vary by jurisdiction.",
    "landlord tenant law": "Landlord-tenant disputes are often governed by local housing codes and state statutes. Key areas include lease agreements, security deposits, eviction procedures, and habitability standards.",
    "contract dispute": "Contract disputes usually involve a breach of contract. Remedies can include specific performance, monetary damages, or contract rescission. Evidence of a valid contract and breach is crucial.",
    "privacy regulations (GDPR/CCPA)": "Major privacy regulations like GDPR (Europe) and CCPA (California) grant individuals rights over their personal data and impose obligations on data collectors. These include rights to access, rectification, erasure, and data portability.",
    "defamation": "Defamation involves making a false statement that harms someone's reputation. It can be libel (written) or slander (spoken). Truth is an absolute defense. Public figures have a higher burden of proof (actual malice).",
    "labor laws": "Labor laws cover aspects like minimum wage, overtime, workplace safety, discrimination, and unionization. Key federal laws in the US include FLSA, OSHA, and Title VII of the Civil Rights Act.",
    "intellectual property": "Intellectual property includes patents (inventions), copyrights (original works of authorship), trademarks (brand identifiers), and trade secrets. Protection varies by type and jurisdiction.",
}

@tool
def get_legal_guidance(query: str) -> str:
    """
    Provides general legal guidance based on a specific query.
    This tool performs a lookup in a simplified legal knowledge base.
    """
    query = query.lower
    for topic, guidance in legal_knowledge_base.items():
        if topic in query:
            return guidance
    
    return "I couldn't find specific guidance on that topic in my current knowledge base. Please try a more general query or consult a legal professional for specific advice."
    
@tool
def draft_complaint_template(complainant_name: str, respondent_name: str, incident_date: str, incident_description: str, desired_outcome: str = "To be determined with legal counsel.") -> str:
    """
    Generates a preliminary complaint draft based on provided details.
    Requires complainant_name, respondent_name, incident_date, and incident_description.
    """
    if not all([complainant_name, respondent_name, incident_date, incident_description]):
        return "Error: Missing essential complaint details for drafting. Please provide complainant name, respondent name, incident date, and incident description."

    draft = f"""
    **PRELIMINARY COMPLAINT DRAFT**

    **Complainant:** {complainant_name}
    **Respondent:** {respondent_name}
    **Date of Incident:** {incident_date}

    **Description of Incident:**
    {incident_description}

    **Desired Outcome:**
    {desired_outcome}

    ---
    *Disclaimer: This is a preliminary draft generated by an AI. It requires review by a legal professional before submission.*
    """
    return draft

# In a real scenario, this would interact with a database
complaint_tracker = {
    "COMP-2023-001": {"status": "Under Review", "last_update": "2023-11-01", "details": "Initial review by intake officer."},
    "COMP-2023-002": {"status": "Awaiting Additional Documents", "last_update": "2023-10-28", "details": "Requested proof of address and incident photos."},
    "COMP-2023-003": {"status": "Closed - Resolution Reached", "last_update": "2023-10-20", "details": "Mediation successful. Case closed."},
}

@tool
def check_complaint_status(complaint_id: str) -> str:
    """
    Checks the current status of a complaint using its unique ID.
    """
    status_info = complaint_tracker.get(complaint_id.upper()) # Ensure ID is uppercase for lookup
    if status_info:
        return f"Complaint ID {complaint_id}: Status - {status_info['status']}, Last Update - {status_info['last_update']}. Details: {status_info['details']}"
    return f"Complaint ID {complaint_id} not found or invalid. Please check the ID and try again."

# List of all tools available to the agent
legal_agent_tools = [get_legal_guidance, draft_complaint_template, check_complaint_status]